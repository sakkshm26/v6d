/** Copyright 2020-2021 Alibaba Group Holding Limited.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#ifndef MODULES_BASIC_DS_ARROW_MOD_H_
#define MODULES_BASIC_DS_ARROW_MOD_H_

#include <iostream>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "arrow/io/memory.h"
#include "arrow/ipc/reader.h"
#include "arrow/ipc/writer.h"
#include "arrow/util/config.h"

#include "basic/ds/arrow_utils.h"
#include "client/client.h"
#include "client/ds/blob.h"
#include "client/ds/core_types.h"
#include "client/ds/stream.h"

namespace vineyard {

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wattributes"
#endif

/// The arrays in vineyard is a wrapper of arrow arrays, in order to
/// Simplify the Build and Construct process.

class ArrowArray {
 public:
  virtual std::shared_ptr<arrow::Array> ToArray() const = 0;
};

class FlatArray : public ArrowArray {};

/// Primitive array

/// Base class for primitive arrays for type factory.

class PrimitiveArray : public FlatArray {};

template <typename T>
class NumericArrayBaseBuilder;

template <typename T>
class [[vineyard]] NumericArray : public PrimitiveArray,
                                  public Registered<NumericArray<T>> {
 public:
  using ArrayType = typename ConvertToArrowType<T>::ArrayType;

  void PostConstruct(const ObjectMeta& meta) override {
    this->array_ = std::make_shared<ArrayType>(
        ConvertToArrowType<T>::TypeValue(), this->length_,
        this->buffer_->Buffer(), this->null_bitmap_->Buffer(),
        this->null_count_, this->offset_);
  }

  std::shared_ptr<ArrayType> GetArray() const { return array_; }

  std::shared_ptr<arrow::Array> ToArray() const override { return array_; }

  const uint8_t* GetBase() const { return array_->values()->data(); }

 private:
  [[shared]] size_t length_;
  [[shared]] int64_t null_count_, offset_;
  [[shared]] std::shared_ptr<Blob> buffer_, null_bitmap_;

  std::shared_ptr<ArrayType> array_;
  friend class Client;
  friend class NumericArrayBaseBuilder<T>;
};

class BooleanArrayBaseBuilder;

class [[vineyard]] BooleanArray : public PrimitiveArray,
                                  public Registered<BooleanArray> {
 public:
  using ArrayType = typename ConvertToArrowType<bool>::ArrayType;

  void PostConstruct(const ObjectMeta& meta) override {
    this->array_ = std::make_shared<ArrayType>(
        ConvertToArrowType<bool>::TypeValue(), this->length_,
        this->buffer_->Buffer(), this->null_bitmap_->Buffer(),
        this->null_count_, this->offset_);
  }

  std::shared_ptr<ArrayType> GetArray() const { return array_; }

  std::shared_ptr<arrow::Array> ToArray() const override { return array_; }

  const uint8_t* GetBase() const { return array_->values()->data(); }

 private:
  [[shared]] size_t length_;
  [[shared]] int64_t null_count_, offset_;
  [[shared]] std::shared_ptr<Blob> buffer_, null_bitmap_;

  std::shared_ptr<ArrayType> array_;
  friend class Client;
  friend class BooleanArrayBaseBuilder;
};

/// Binary array

template <typename ArrayType>
class BaseBinaryArrayBaseBuilder;

template <typename ArrayType>
class [[vineyard]] BaseBinaryArray
    : public FlatArray,
      public Registered<BaseBinaryArray<ArrayType>> {
 public:
  void PostConstruct(const ObjectMeta& meta) override {
    this->array_ = std::make_shared<ArrayType>(
        this->length_, this->buffer_offsets_->Buffer(),
        this->buffer_data_->Buffer(), this->null_bitmap_->Buffer(),
        this->null_count_, this->offset_);
  }

  std::shared_ptr<ArrayType> GetArray() const { return array_; }

  std::shared_ptr<arrow::Array> ToArray() const override { return array_; }
  const uint8_t* GetBase() const { return array_->value_data()->data(); }

 private:
  [[shared]] size_t length_;
  [[shared]] int64_t null_count_, offset_;
  [[shared]] std::shared_ptr<Blob> buffer_data_, buffer_offsets_, null_bitmap_;

  std::shared_ptr<ArrayType> array_;

  friend class Client;

  friend class BaseBinaryArrayBaseBuilder<ArrayType>;
};

using BinaryArray = BaseBinaryArray<arrow::BinaryArray>;
using LargeBinaryArray = BaseBinaryArray<arrow::LargeBinaryArray>;
using StringArray = BaseBinaryArray<arrow::StringArray>;
using LargeStringArray = BaseBinaryArray<arrow::LargeStringArray>;

class FixedSizeBinaryArrayBaseBuilder;

class [[vineyard]] FixedSizeBinaryArray
    : public PrimitiveArray,
      public Registered<FixedSizeBinaryArray> {
 public:
  void PostConstruct(const ObjectMeta& meta) override {
    this->array_ = std::make_shared<arrow::FixedSizeBinaryArray>(
        arrow::fixed_size_binary(this->byte_width_), this->length_,
        this->buffer_->Buffer(), this->null_bitmap_->Buffer(),
        this->null_count_, this->offset_);
  }

  std::shared_ptr<arrow::FixedSizeBinaryArray> GetArray() const {
    return array_;
  }
  std::shared_ptr<arrow::Array> ToArray() const override { return array_; }

 private:
  [[shared]] int32_t byte_width_;
  [[shared]] size_t length_;
  [[shared]] int64_t null_count_, offset_;
  [[shared]] std::shared_ptr<Blob> buffer_, null_bitmap_;

  std::shared_ptr<arrow::FixedSizeBinaryArray> array_;

  friend class Client;
  friend class FixedSizeBinaryArrayBaseBuilder;
};

/// Null array

class NullArrayBaseBuilder;

class [[vineyard]] NullArray : public FlatArray, public Registered<NullArray> {
 public:
  using ArrayType = arrow::NullArray;
  void PostConstruct(const ObjectMeta& meta) override {
    this->array_ = std::make_shared<arrow::NullArray>(this->length_);
  }

  std::shared_ptr<ArrayType> GetArray() const { return array_; }

  std::shared_ptr<arrow::Array> ToArray() const override { return array_; }

 private:
  [[shared]] size_t length_;

  std::shared_ptr<arrow::NullArray> array_;

  friend class Client;
  friend class NullArrayBaseBuilder;
};

namespace detail {

inline std::shared_ptr<arrow::Array> ConstructArray(
    std::shared_ptr<Object> obj) {
  if (auto arr = std::dynamic_pointer_cast<FixedSizeBinaryArray>(obj)) {
    return arr->GetArray();
  }
  if (auto arr = std::dynamic_pointer_cast<StringArray>(obj)) {
    return arr->GetArray();
  }
  if (auto arr = std::dynamic_pointer_cast<LargeStringArray>(obj)) {
    return arr->GetArray();
  }
  if (auto arr = std::dynamic_pointer_cast<NullArray>(obj)) {
    return arr->GetArray();
  }
  if (auto arr = std::dynamic_pointer_cast<ArrowArray>(obj)) {
    return arr->ToArray();
  }
  // Don't abort the program, the unresolvable array should be reported lazily.
  //
  // VINEYARD_ASSERT(nullptr != nullptr,
  //                 "Unsupported array type: " + obj->meta().GetTypeName());
  return nullptr;
}

}  // namespace detail

/// Nested array

template <typename ArrayType>
class BaseListArrayBaseBuilder;

template <typename ArrayType>
class [[vineyard]] BaseListArray : public ArrowArray,
                                   public Registered<BaseListArray<ArrayType>> {
 public:
  void PostConstruct(const ObjectMeta& meta) override {
    auto arr = detail::ConstructArray(values_);
    auto list_type =
        std::make_shared<typename ArrayType::TypeClass>(arr->type());
    this->array_ = std::make_shared<ArrayType>(
        list_type, this->length_, this->buffer_offsets_->Buffer(), arr,
        this->null_bitmap_->Buffer(), this->null_count_, this->offset_);
  }

  std::shared_ptr<ArrayType> GetArray() const { return array_; }

  std::shared_ptr<arrow::Array> ToArray() const override { return array_; }

  const uint8_t* GetBase() const { return array_->value_data()->data(); }

 private:
  [[shared]] size_t length_;
  [[shared]] int64_t null_count_, offset_;
  [[shared]] std::shared_ptr<Blob> buffer_offsets_, null_bitmap_;
  [[shared]] std::shared_ptr<Object> values_;

  std::shared_ptr<ArrayType> array_;

  friend class Client;
  friend class BaseListArrayBaseBuilder<ArrayType>;
};

using ListArray = BaseListArray<arrow::ListArray>;
using LargeListArray = BaseListArray<arrow::LargeListArray>;

class SchemaProxyBaseBuilder;

class [[vineyard]] SchemaProxy : public Registered<SchemaProxy> {
 public:
  void PostConstruct(const ObjectMeta& meta) override {
    arrow::io::BufferReader reader(this->buffer_->Buffer());
#if defined(ARROW_VERSION) && ARROW_VERSION < 17000
    CHECK_ARROW_ERROR(arrow::ipc::ReadSchema(&reader, nullptr, &this->schema_));
#else
    CHECK_ARROW_ERROR_AND_ASSIGN(this->schema_,
                                 arrow::ipc::ReadSchema(&reader, nullptr));
#endif
  }

  std::shared_ptr<arrow::Schema> const& GetSchema() const { return schema_; }

 private:
  [[shared]] std::shared_ptr<Blob> buffer_;

  std::shared_ptr<arrow::Schema> schema_;

  friend class Client;
  friend class SchemaProxyBaseBuilder;
};

class RecordBatchBaseBuilder;

class [[vineyard(streamable)]] RecordBatch : public Registered<RecordBatch> {
 public:
  void PostConstruct(const ObjectMeta& meta) override {
    for (size_t idx = 0; idx < columns_.size(); ++idx) {
      arrow_columns_.emplace_back(detail::ConstructArray(columns_[idx]));
    }
  }

  std::shared_ptr<arrow::RecordBatch> GetRecordBatch() const {
    if (this->batch_ == nullptr) {
      this->batch_ = arrow::RecordBatch::Make(this->schema_.GetSchema(),
                                              this->row_num_, arrow_columns_);
    }
    return this->batch_;
  }

  std::shared_ptr<arrow::Schema> schema() const { return schema_.GetSchema(); }

  size_t num_columns() const { return column_num_; }

  size_t num_rows() const { return row_num_; }

  std::vector<std::shared_ptr<Object>> const& columns() const {
    return columns_;
  }

 private:
  [[shared]] size_t column_num_ = 0;
  [[shared]] size_t row_num_ = 0;
  [[shared]] SchemaProxy schema_;
  [[shared]] Tuple<std::shared_ptr<Object>> columns_;

  std::vector<std::shared_ptr<arrow::Array>> arrow_columns_;
  mutable std::shared_ptr<arrow::RecordBatch> batch_;

  friend class Client;
  friend class RecordBatchBaseBuilder;
};

class TableBaseBuilder;

class [[vineyard]] Table : public Registered<Table> {
 public:
  void PostConstruct(const ObjectMeta& meta) override {}

  std::shared_ptr<arrow::Table> GetTable() const {
    if (this->table_ == nullptr) {
      if (batch_num_ > 0) {
        arrow_batches_.resize(batch_num_);
        for (size_t i = 0; i < batch_num_; ++i) {
          arrow_batches_[i] = batches_[i]->GetRecordBatch();
        }
        VINEYARD_CHECK_OK(RecordBatchesToTable(arrow_batches_, &this->table_));
      } else {
#if defined(ARROW_VERSION) && ARROW_VERSION < 17000
        CHECK_ARROW_ERROR(arrow::Table::FromRecordBatches(
            this->schema_->GetSchema(), {}, &this->table_));
#else
        CHECK_ARROW_ERROR_AND_ASSIGN(
            this->table_,
            arrow::Table::FromRecordBatches(this->schema_->GetSchema(), {}));
#endif
      }
    }
    return this->table_;
  }

  std::shared_ptr<arrow::Schema> schema() const { return schema_->GetSchema(); }

  size_t batch_num() const { return batch_num_; }

  size_t num_rows() const { return num_rows_; }

  size_t num_columns() const { return num_columns_; }

  std::vector<std::shared_ptr<RecordBatch>> const& batches() const {
    return batches_;
  }

 private:
  [[shared]] size_t batch_num_, num_rows_, num_columns_;
  [[shared]] Tuple<std::shared_ptr<RecordBatch>> batches_;
  [[shared]] std::shared_ptr<SchemaProxy> schema_;

  mutable std::vector<std::shared_ptr<arrow::RecordBatch>> arrow_batches_;
  mutable std::shared_ptr<arrow::Table> table_;

  friend class Client;
  friend class TableBaseBuilder;
};

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif

}  // namespace vineyard

#endif  // MODULES_BASIC_DS_ARROW_MOD_H_
